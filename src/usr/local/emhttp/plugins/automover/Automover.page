Menu="Utilities"
Type="xmenu"
Title="Automover"
Icon="icon.png"
Tag="icon.png"
Markdown="false"
---
<script>
// UNIVERSAL CSRF TOKEN DISCOVERY for Unraid plugin pages
let csrfToken = "<?= $_GET['csrf_token'] ?? ($_COOKIE['csrf_token'] ?? '') ?>";

// Try dynamic lookup from global scope, cookie, or meta
if (!csrfToken || csrfToken === "undefined" || csrfToken === "") {
  try {
    // 1️⃣ Try the global variable used by Unraid's WebGUI JS
    if (typeof window.csrf_token !== "undefined" && window.csrf_token) {
      csrfToken = window.csrf_token;
    }

    // 2️⃣ Try any embedded meta tag
    if ((!csrfToken || csrfToken === "") && document.querySelector("meta[name='csrf_token']")) {
      csrfToken = document.querySelector("meta[name='csrf_token']").getAttribute("content");
    }

    // 3️⃣ Try cookie (most Unraid builds set it)
    if ((!csrfToken || csrfToken === "") && document.cookie.includes("csrf_token=")) {
      const m = document.cookie.match(/csrf_token=([^;]+)/);
      if (m) csrfToken = decodeURIComponent(m[1]);
    }

    // 4️⃣ Fallback: try to extract from any script tag in the parent frame
    if ((!csrfToken || csrfToken === "") && window.parent) {
      try {
        if (window.parent.csrf_token) csrfToken = window.parent.csrf_token;
      } catch (e) { /* ignore cross-frame */ }
    }
  } catch (err) {
    console.warn("CSRF token discovery failed:", err);
  }
}

console.log("Resolved CSRF token:", csrfToken || "<empty>");
</script>


<?php
$cfgPath = '/boot/config/plugins/automover/settings.cfg';

// Define all default keys and their order
$defaults = [
    'POOL_NAME' => 'cache',
    'THRESHOLD' => 0,
    'INTERVAL' => 60,
    'DRY_RUN' => 'no',
    'ALLOW_DURING_PARITY' => 'no',
    'AUTOSTART' => 'no',
    'AGE_BASED_FILTER' => 'no',
    'AGE_DAYS' => 1,
    'SIZE_BASED_FILTER' => 'no',
    'SIZE_MB' => 1,
    'EXCLUSIONS_ENABLED' => 'no',
    'QBITTORRENT_SCRIPT' => 'no',
    'QBITTORRENT_HOST' => 'yourip:8080',
    'QBITTORRENT_USERNAME' => '',
    'QBITTORRENT_PASSWORD' => '',
    'QBITTORRENT_DAYS_FROM' => '0',
    'QBITTORRENT_DAYS_TO' => '2',
    'QBITTORRENT_STATUS' => 'completed'
];

// Load existing config if present
$existing = [];
if (file_exists($cfgPath)) {
    $existing = parse_ini_file($cfgPath) ?: [];
}
// Merge without overwriting existing keys
foreach ($defaults as $key => $value) {
    if (!array_key_exists($key, $existing)) {
        $existing[$key] = $value;
    }
}
// Rebuild config text in the correct order
$configText = '';
foreach ($defaults as $key => $defaultValue) {
    $val = $existing[$key];
    $configText .= "$key=\"$val\"\n";
}
@file_put_contents($cfgPath, $configText);
$settings = $existing;
?>

<style>
:root {
  --primary-blue: #00aaff;
  --status-green: #2ECC40;
}

#automover-settings {
  background: #111;
  border-radius: 12px;
  box-shadow: 0 0 12px rgba(0, 128, 128, .3);
  padding: 20px;
  text-align: left;
  width: fit-content;
}

.form-row {
  flex-direction: column;
  gap: 15px;
  margin-bottom: 20px;
}

label {
  color: var(--primary-blue);
  font-weight: bold;
  margin-bottom: 5px;
}

input,
select {
  background: #111;
  border: 1px solid var(--primary-blue);
  border-radius: 5px;
  color: #fff;
  padding: 8px;
}

button {
  border: none;
  border-radius: 4px;
  color: #fff;
  cursor: pointer;
  margin-right: 10px;
  padding: 8px 15px;
}

.checkbox-row {
  align-items: center;
  display: grid;
  gap: 0 0px;
  grid-template-columns: repeat(2, 1fr);
  margin-top: 10px;
}

.checkbox-row label {
  align-items: center;
  cursor: pointer;
  display: flex;
  font-size: 15px;
  gap: 0px;
  line-height: 1.4;
}

.checkbox-row input[type="checkbox"] {
  accent-color: var(--primary-blue);
  transform: scale(1.2);
}

.form-check {
  align-items: center;
  color: var(--primary-blue);
  cursor: pointer;
  display: inline-flex;
  gap: 8px;
}

input[type="checkbox"] {
  accent-color: var(--primary-blue);
  cursor: pointer;
  height: 16px;
  width: 16px;
}

.form-check input {
  margin-right: 8px;
  vertical-align: middle;
}

.status-container {
  margin-top: 20px;
}

.status-row {
  align-items: center;
  display: flex;
  margin-bottom: 6px;
}

.status-label {
  color: var(--primary-blue);
  font-weight: bold;
  width: 75px;
}

#status-text,
#last-run-text {
  color: var(--status-green);
}

.tooltip {
  display: inline-block;
  position: relative;
}

.tooltip:hover::after {
  background: #333;
  border-radius: 4px;
  bottom: 125%;
  color: #fff;
  content: attr(data-tooltip);
  font-size: 12px;
  left: 0;
  opacity: .9;
  padding: 6px 10px;
  position: absolute;
  text-transform: none;
  white-space: nowrap;
  z-index: 10;
}

.form-pair {
  display: flex;
  align-items: center;       /* Center vertically */
  justify-content: flex-start;
  gap: 10px;
  margin-bottom: 15px;
}

.input-wrapper {
  display: flex;
  flex-direction: column;
  flex: 1;                   /* Let input fill remaining width */
}

.form-pair label {
  width: 130px;              /* Match other field labels */
  color: var(--primary-blue);
  font-weight: bold;
  text-align: left;         /* Align text right for consistency */
  margin-right: 10px;
}

.form-pair input,
.form-pair select {
  background: #111;
  color: #fff;
}

.form-pair input[type="text"],
.form-pair input[type="password"] {
  width: 100%;               /* Full width under input-wrapper */
  max-width: 300px;          /* Cap the input width if needed */
}

.short-input {
  flex: 0 0 auto;
  max-width: 60px;
  min-width: 60px;
  width: 60px;
}

.short-input-filter {
  flex: 0 0 auto;
  max-width: 150px;
  min-width: 150px;
  width: 150px;
}

#pool.short-input {
  flex: 0 0 auto;
  max-width: 100%;
  min-width: 60px;
}

input.invalid {
  border-color: red;
  color: red;
}

.field-warning {
  color: red;
  display: none;
  font-size: 12px;
  margin-top: 4px;
}

input.invalid + .field-warning {
  display: block;
}

@keyframes shake {
  0%, 100% {
    transform: translateX(0);
  }
  25% {
    transform: translateX(-5px);
  }
  50% {
    transform: translateX(5px);
  }
  75% {
    transform: translateX(-5px);
  }
}

#automover-settings.shake {
  animation: shake .3s;
}

#move-now-confirmation,
#save-confirmation,
#stop-confirmation {
  animation: flash .4s ease;
  background: var(--primary-blue);
  border-radius: 6px;
  clear: both;
  color: #fff;
  display: block;
  font-weight: bold;
  margin-top: 12px;
  opacity: 0;
  padding: 6px 12px;
  transition: opacity .4s ease;
  width: fit-content;
}

@keyframes flash {
  0% {
    opacity: 0;
    transform: scale(1);
  }
  50% {
    opacity: 1;
    transform: scale(1.1);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
}

#automover-wrapper {
  align-items: flex-start;
  display: flex;
  flex-wrap: wrap;
  gap: 30px;
}

#automover-settings {
  flex: 1;
  height: 105vh;
  max-width: 450px;
  max-height: 105vh;
}

#moved-log-container {
  align-items: flex-start;
  background: #111;
  border-radius: 12px;
  box-shadow: 0 0 12px rgba(0, 128, 128, .3);
  color: #f0f8ff;
  display: flex;
  flex: 1;
  flex-direction: column;
  font-family: sans-serif;
  height: 105vh;
  max-height: 105vh;
  max-width: 970px;
  overflow-y: auto;
  padding: 20px;
}

#moved-log-container h3 {
  color: var(--primary-blue);
  font-size: 18px;
  margin-bottom: 12px;
}

#automover-log {
  background: #111;
  border: 1px solid var(--primary-blue);
  border-radius: 8px;
  box-sizing: border-box;
  color: #00ffaa;
  font-family: monospace;
  font-size: 13px;
  padding: 10px;
  white-space: pre-wrap;
  width: 100%;
  word-break: break-word;
}

#log-counts {
  color: var(--primary-blue);
  font-size: 14px;
  margin-bottom: 12px;
  text-align: left;
  width: 100%;
}

.skipped-line {
  color: #ffd700;
}

.log-header {
  align-items: flex-start;
  display: flex;
  flex-direction: column;
  margin-bottom: 12px;
}

.log-header h3 {
  color: var(--primary-blue);
  font-size: 18px;
  margin: 0;
}

.log-stats {
  color: #00ffaa;
  font-size: 14px;
  text-align: right;
  white-space: nowrap;
}

#last-run-container {
  background: #111;
  border-radius: 12px;
  box-shadow: 0 0 12px rgba(0, 128, 128, .3);
  color: #f0f8ff;
  flex: 1;
  font-family: sans-serif;
  height: 105vh;
  max-height: 105vh;
  max-width: 420px;
  overflow-y: auto;
  padding: 10px;
}

#last-run-container h3 {
  color: var(--primary-blue);
  font-size: 18px;
  margin-bottom: 12px;
}

#last-run-log {
  background: #111;
  border: 1px solid var(--primary-blue);
  border-radius: 8px;
  color: #00ffaa;
  font-family: monospace;
  font-size: 13px;
  max-height: 95vh;
  overflow-y: auto;
  padding: 10px;
  white-space: pre-wrap;
  word-break: break-word;
}

#log-filter {
  background: #111;
  border: 1px solid var(--primary-blue);
  border-radius: 6px;
  box-shadow: 0 0 6px rgba(0, 128, 128, .3);
  color: #00ffaa;
  font-family: monospace;
  font-size: 13px;
  padding: 8px 12px;
  transition: border-color .2s, box-shadow .2s;
  width: 100px;
}

#log-filter:focus {
  border-color: #00bfff;
  box-shadow: 0 0 10px rgba(0, 191, 255, .5);
  outline: none;
}

#log-filter::placeholder {
  color: #008080;
}

input[type="number"].short-input {
  -moz-appearance: auto;
  -webkit-appearance: auto;
  appearance: auto;
}

.select-pool {
  appearance: none;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  transition: width .2s;
  white-space: nowrap;
  width: auto;
}

.select-pool.expanded {
  width: auto !important;
}

#save-messages div {
  opacity: 1;
  transition: opacity .6s;
}

/* Modal picker */
#exclusion-modal {
  align-items: center;
  background: rgba(0, 0, 0, .8);
  bottom: 0;
  display: none;
  justify-content: center;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 9999;
}

#exclusion-modal .box {
  background: #111;
  border-radius: 10px;
  color: #fff;
  display: flex;
  flex-direction: column;
  height: 600px;
  overflow: hidden;
  padding: 18px;
  position: relative;
  width: 800px;
}

#exclusion-modal .header {
  align-items: center;
  display: flex;
  gap: 10px;
  margin-bottom: 0px;
}

#exclusion-modal .crumbs {
  flex: 1;
  overflow: auto;
  white-space: nowrap;
}

#exclusion-modal .crumbs a {
  color: #00bfff;
  margin-right: 8px;
  text-decoration: none;
}

#exclusion-modal .grid {
  border: 1px solid #333;
  flex: 1;
  overflow-y: auto;
  padding: 6px;
}

#exclusion-modal .row {
  align-items: center;
  border-bottom: 1px solid #00aaff22;
  cursor: default;
  display: flex;
  gap: 0px;
  padding: 0px;
}

#exclusion-modal .row .name {
  align-items: center;
  color: #fff;
  display: flex;
  flex: 1;
  font-weight: 500;
  gap: 0px;
}

#exclusion-modal .row.folder .name {
  color: var(--primary-blue);
}

#exclusion-modal .row .name .icon {
  margin-right: 2px;
}

#exclusion-modal .row .name .label {
  display: inline-block;
}

#exclusion-modal .row input[type="checkbox"] {
  margin-right: 2px;
  transform: scale(1.1);
}

#exclusion-modal .row .type {
  opacity: .7;
  text-align: right;
  width: 70px;
}

#exclusion-modal .footer {
  align-items: center;
  display: flex;
  gap: 12px;
  justify-content: space-between;
  margin-top: 0px;
}

#exclusion-modal .toast {
  border-radius: 6px;
  bottom: 0px;
  color: red;
  display: none;
  left: 16px;
  padding: 8px 10px;
  position: absolute;
}

#exclusion-modal .btn {
  background: #0b5fff;
  border: none;
  border-radius: 6px;
  color: #fff;
  cursor: pointer;
  padding: 8px 12px;
}

#exclusion-modal .btn.secondary {
  background: #444;
}

#exclusion-modal .btn.warn {
  background: #b54708;
}

#exclusions-field {
  color: #ccc;
  cursor: pointer;
  font-style: italic;
  opacity: 0.6;
  user-select: none;
  width: 250px;
}

#exclusion-modal .crumb {
  color: var(--primary-blue);
  cursor: pointer;
  font-weight: 500;
  transition: color 0.2s ease;
  user-select: none;
}

#exclusion-view-modal .modal-body {
  position: relative;
}

#exclusion-view-modal .toast {
  background: rgba(0, 0, 0, 0.9);
  border: 1px solid #00aaff55;
  border-radius: 6px;
  bottom: 12px;
  color: #00ff99;
  display: none;
  font-weight: 600;
  left: 50%;
  padding: 8px 14px;
  position: absolute;
  transform: translateX(-50%);
  z-index: 10;
}

#exclusion-view-modal .toast.error {
  color: #ff5555;
}

#exclusion-modal .crumb:hover {
  color: #ff3333;
  text-decoration: underline;
}

#exclusion-modal .sep {
  color: #999;
}

.footer > div {
  gap: 6px !important;
}

.footer button {
  margin: 0 !important;
}

*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Focus outline for keyboard users */
:focus-visible {
  outline: 2px solid var(--primary-blue);
  outline-offset: 2px;
}

/* Hover and focus for interactive elements */
button:hover,
input[type="checkbox"]:hover,
select:hover,
a:hover {
  filter: brightness(1.1);
}

button:focus-visible,
input[type="checkbox"]:focus-visible,
select:focus-visible,
a:focus-visible {
  outline: 2px solid var(--primary-blue);
  outline-offset: 2px;
}

/* Scrollbar dark theme for readability */
::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-thumb {
  background: var(--primary-blue);
  border-radius: 4px;
}
</style>

<div id="automover-wrapper">
  <form id="automover-settings">
    <!-- Pool -->
    <div class="form-pair">
      <label for="pool" class="tooltip" data-tooltip="Choose which pool to monitor for disk usage.">Pool:</label>
      <select id="pool" class="select-pool" data-selected="<?php echo htmlspecialchars($settings['POOL_NAME'] ?? '') ?>"></select>
    </div>

    <div id="pool-warning" class="field-warning">⚠️ This pool is not assigned to any share that has mover direction assigned in either direction. Nothing would be moved with this pool selected.</div>
    <br>

    <!-- Threshold -->
    <div class="form-pair">
      <label for="threshold" class="tooltip" data-tooltip="Set the disk usage percentage threshold that triggers the mover.">Threshold (%):</label>
      <div class="input-wrapper">
        <input type="number" id="threshold" class="short-input" min="0" max="100" step="1"
          value="<?php echo htmlspecialchars($settings['THRESHOLD'] ?? '') ?>">
        <div id="threshold-warning" class="field-warning">Threshold must be between 0–100</div>
      </div>
    </div>

    <!-- Interval -->
    <div class="form-pair">
      <label for="interval" class="tooltip" data-tooltip="Interval between usage checks in minutes.">Interval (minutes):</label>
      <div class="input-wrapper">
        <input type="number" id="interval" class="short-input" min="5" step="1"
          value="<?php echo htmlspecialchars($settings['INTERVAL'] ?? '') ?>">
        <div id="interval-warning" class="field-warning">Interval must be at least 5 minutes</div>
      </div>
    </div>

    <!-- Age -->
    <div class="form-pair" id="age-days-container" style="display:none;">
      <label for="age_days" class="tooltip" data-tooltip="Only move files older than this many days.">Age (days):</label>
      <div class="input-wrapper">
        <input type="number" id="age_days" class="short-input" min="1" step="1"
          value="<?php echo htmlspecialchars($settings['AGE_DAYS'] ?? '') ?>">
        <div id="age-days-warning" class="field-warning">Age must be at least 1 days</div>
      </div>
    </div>

    <!-- Size -->
    <div class="form-pair" id="size-mb-container" style="display:none;">
      <label for="size_mb" class="tooltip" data-tooltip="Only move files larger than this size (in MB).">Min Size (MB):</label>
      <div class="input-wrapper">
        <input type="number" id="size_mb" class="short-input" min="1" step="1"
          value="<?php echo htmlspecialchars($settings['SIZE_MB'] ?? '') ?>">
        <div id="size-mb-warning" class="field-warning">Size must be at least 1 MB</div>
      </div>
    </div>

<!-- 🧩 Qbittorrent Configuration Fields -->
<div id="qbit-fields" style="display:none;">

  <div class="form-pair">
    <label for="qbit_host" class="tooltip" data-tooltip="Example: http://10.100.10.250:8080">Host:</label>
    <div class="input-wrapper">
      <input type="text" id="qbit_host" value="<?php echo htmlspecialchars($settings['QBITTORRENT_HOST'] ?? '') ?>">
      <div id="qbit-host-warning" class="field-warning">Host is required</div>
    </div>
  </div>

  <div class="form-pair">
    <label for="qbit_user">Username:</label>
    <div class="input-wrapper">
      <input type="text" id="qbit_user" value="<?php echo htmlspecialchars($settings['QBITTORRENT_USERNAME'] ?? '') ?>">
      <div id="qbit-user-warning" class="field-warning">Username is required</div>
    </div>
  </div>

  <div class="form-pair">
    <label for="qbit_pass">Password:</label>
    <div class="input-wrapper">
      <input type="password" id="qbit_pass" value="<?php echo htmlspecialchars($settings['QBITTORRENT_PASSWORD'] ?? '') ?>">
      <div id="qbit-pass-warning" class="field-warning">Password is required</div>
    </div>
  </div>

  <div class="form-pair">
    <label for="qbit_days_from" class="tooltip" data-tooltip="Torrents newer than this age (days) will be ignored.">Days From:</label>
    <div class="input-wrapper">
      <input type="number" id="qbit_days_from" class="short-input" min="0" step="1"
        value="<?php echo htmlspecialchars($settings['QBITTORRENT_DAYS_FROM'] ?? '') ?>">
      <div id="qbit-days-from-warning" class="field-warning">Must be a number between 0 and 99999</div>
    </div>
  </div>

  <div class="form-pair">
    <label for="qbit_days_to" class="tooltip" data-tooltip="Oldest torrents (days).">Days To:</label>
    <div class="input-wrapper">
      <input type="number" id="qbit_days_to" class="short-input" min="1" step="1"
        value="<?php echo htmlspecialchars($settings['QBITTORRENT_DAYS_TO'] ?? '') ?>">
      <div id="qbit-days-to-warning" class="field-warning">Must be a number between 1 and 99999</div>
      <div id="qbit-days-order-warning" class="field-warning">Days From cannot be equal or lower than Days To</div>
    </div>
  </div>

  <div class="form-pair">
    <label for="qbit_status" class="tooltip" data-tooltip="Which torrents to act on.">Status:</label>
    <select id="qbit_status">
      <?php
      $statuses = [
        'completed', 'all', 'downloading', 'seeding', 'paused', 'stopped',
        'active', 'inactive', 'resumed', 'running', 'stalled', 'stalled_uploading',
        'stalled_downloading', 'checking', 'moving', 'errored'
      ];
      foreach ($statuses as $status) {
          $selected = ($settings['QBITTORRENT_STATUS'] ?? 'completed') === $status ? 'selected' : '';
          echo "<option value=\"$status\" $selected>$status</option>";
      }
      ?>
    </select>
  </div>

</div>

    <!-- Exclusions row (appears below Interval when enabled) -->
    <div class="form-pair" id="exclusions-row" style="display:none;">
      <label for="exclusions-field" class="tooltip" data-tooltip="Open the file picker to add or remove excluded paths.">Exclusions:</label>
      <div class="input-wrapper">
        <input id="exclusions-field" type="text" readonly value="Click to open file picker" title="Click to open file picker">
        <button id="viewExclusionsBtn" type="button">View/Edit Exclusions</button>
      </div>
    </div>

<div id="exclusion-view-modal" style="display:none; position:fixed; top:0; left:0; right:0; bottom:0;
  background:rgba(0,0,0,0.8); z-index:9999; align-items:center; justify-content:center;">
  <div class="modal-body" style="background:#111; color:white; padding:20px; border-radius:10px;
  width:800px; height:600px; overflow:hidden; display:flex; flex-direction:column;">
    <h3 style="margin-top:0;">View/Edit Exclusions</h3>
    <p style="margin-top:4px; margin-bottom:10px; color:#aaa; font-style:italic; font-size:13px;">
      * Any array paths changed or added need to be entered as <code>user0</code> instead of <code>disk#</code>.
      For example: <code>/mnt/disk3/data/test/file.txt</code> should be entered as <code>/mnt/user0/data/test/file.txt</code>. This does not apply to pool paths.
    </p>

    <textarea id="exclusionsEditor" style="
      background:#000; color:#fff; font-family:monospace;
      border:1px solid #333; border-radius:6px; padding:10px; resize:none;
      width:97%; height:480px; overflow-y:auto;"></textarea>

<div style="display:flex; justify-content:space-between; margin-top:auto; padding-top:0px;">
  <div>
    <!-- Copy button now matches 'Remove Selected' style -->
    <button id="copyExclusionsBtn" type="button" style="
      background:#444;
      color:#fff;
      border:none;
      border-radius:6px;
      cursor:pointer;
      padding:8px 12px;
      font-weight:500;
    ">Copy</button>

    <!-- Save button now matches 'Add Selected' style -->
    <button id="saveExclusionsBtn" type="button" style="
      background:#0b5fff;
      color:#fff;
      border:none;
      border-radius:6px;
      cursor:pointer;
      padding:8px 12px;
      font-weight:600;
    ">Save</button>
  </div>

  <!-- Close button unchanged -->
<button id="closeExclusionsView" type="button" style="
  background:#b54708;
  color:#fff;
  border:none;
  border-radius:6px;
  cursor:pointer;
  padding:8px 12px;
  font-weight:600;
  box-shadow:0 0 6px rgba(0,0,0,0.4);
">Close</button>
</div>
  </div>
</div>

    <!-- Checkboxes row -->
    <div class="checkbox-row">
      <label class="form-check tooltip" data-tooltip="Start Automover automatically when Unraid boots.">
        <input type="checkbox" id="autostart" <?php echo ($settings['AUTOSTART'] ?? '') === 'yes' ? 'checked' : '' ?>> Autostart on Boot
      </label>

      <label class="form-check tooltip" data-tooltip="Enable an exclusions list of files and folders that won't be moved.">
        <input type="checkbox" id="enable_exclusions" <?php echo ($settings['EXCLUSIONS_ENABLED'] ?? '') === 'yes' ? 'checked' : '' ?>> Enable Exclusions
      </label>

      <label class="form-check tooltip" data-tooltip="Allow Automover to run even when Unraid is doing a parity check.">
        <input type="checkbox" id="allow_during_parity" <?php echo ($settings['ALLOW_DURING_PARITY'] ?? '') === 'yes' ? 'checked' : '' ?>> Allow During Parity
      </label>

      <label class="form-check tooltip" data-tooltip="Enable to move files only if older than the specified amount of days old.">
        <input type="checkbox" id="age_based_filter" <?php echo ($settings['AGE_BASED_FILTER'] ?? '') === 'yes' ? 'checked' : '' ?>> Enable Age Based Filter
      </label>

      <label class="form-check tooltip" data-tooltip="Enable to simulate moves without actually transferring files.">
        <input type="checkbox" id="dry_run" <?php echo ($settings['DRY_RUN'] ?? '') === 'yes' ? 'checked' : '' ?>> Dry Run
      </label>

      <label class="form-check tooltip" data-tooltip="Enable to move only files larger than the specified size in MB.">
        <input type="checkbox" id="size_based_filter" <?php echo ($settings['SIZE_BASED_FILTER'] ?? '') === 'yes' ? 'checked' : '' ?>> Enable Size Based Filter
      </label>

      <label class="form-check tooltip" data-tooltip="Pause qbittorrent torrents before move and resume after.">
        <input type="checkbox" id="qbit_script" <?php echo ($settings['QBITTORRENT_SCRIPT'] ?? '') === 'yes' ? 'checked' : '' ?>> Enable Qbittorrent Script
      </label>
    </div>

<div id="python-warning"
     data-python-installed="<?php echo file_exists('/usr/bin/python3') ? '1' : '0'; ?>"
     style="display:none; color:red; padding:8px 12px; border-radius:6px;
            margin-top:8px; font-weight:600; font-size:14px;">
  ⚠️ Python3 is not installed and this option requires it. Install it from the Apps page.
</div>

<div class="form-group">
  <button type="button" id="save-settings" class="btn tooltip" data-tooltip="Save your configuration settings and start the automover service.">Save & Start</button>
  <button type="button" id="stop-button" class="btn tooltip" data-tooltip="Stop Automover service.">Stop</button>
  <button type="button" id="moveNowBtn" class="btn tooltip" data-tooltip="Run Automover immediately, ignoring filters.">Move Now</button>
</div>

    <div id="move-now-confirmation" style="display:none;margin-top:10px;">✅ Moving Now</div>
    <div id="save-confirmation" style="display:none;margin-top:10px;">✅ Saved & Started Automover</div>
    <div id="stop-confirmation" style="display:none;margin-top:10px;">✅ Stopping Automover</div>

    <div id="save-messages" style="display:none;margin-top:10px;margin-bottom:20px;background:#111;border-radius:6px;font-family:monospace;color:red;"></div>

    <div class="status-container">
      <div class="status-row"><span class="status-label">Status:</span><span id="status-text">Stopped</span></div>
      <div class="status-row"><span class="status-label">Last Run:</span><span id="last-run-text">No last run available</span></div>
    </div>
  </form>

  <div id="moved-log-container">
    <div class="log-header">
      <h3>Mover Log For Last Run</h3>
      <div id="log-counts" class="log-stats"></div>
    </div>
    <input type="text" id="log-filter" class="short-input-filter" placeholder="🔍 Filter keyword" style="margin-bottom:12px;">
    <pre id="automover-log">Loading...</pre>
  </div>

  <div id="last-run-container">
    <h3>Last Run Details</h3>
    <pre id="last-run-log">Loading last run log...</pre>
  </div>
</div>

<!-- Modal -->
<div id="exclusion-modal">
  <div class="box">
    <div class="header">
      <button class="btn secondary" id="btn-up" title="Go up directory">↑ Up</button>
      <div class="crumbs" id="crumbs"></div>
      <!-- ❌ Removed the Close button from here -->
    </div>

    <div class="grid" id="picker-grid"></div>

    <!-- ✅ Footer updated with Close button on bottom-right -->
    <div class="footer" style="display:flex; justify-content:space-between; margin-top:10px; align-items:flex-end;">
      <!-- Left side: Add/Remove buttons -->
      <div style="display:flex; flex-direction:column; gap:2px; line-height:1;">
        <!-- Row 1: Normal buttons -->
        <div style="display:flex; align-items:center; gap:6px; margin:0; padding:0;">
          <button id="btn-add" class="btn primary">Add Selected</button>
          <button id="btn-remove" class="btn secondary">Remove Selected</button>
        </div>

        <!-- Row 2: Wildcard buttons -->
        <div style="display:flex; align-items:center; gap:6px; margin:0; padding:0;">
          <button id="addExtBtn" type="button" class="btn primary" style="display:none; padding:6px 12px;">
            Add extensions as wildcards
          </button>
          <button id="removeExtBtn" type="button" class="btn secondary" style="display:none; padding:6px 12px;">
            Remove extensions as wildcards
          </button>
        </div>
      </div>

      <!-- Right side: Close button -->
      <div style="display:flex; justify-content:flex-end; align-items:flex-end;">
        <button class="btn warn" id="btn-close" style="padding:8px 12px; font-weight:600;">Close</button>
      </div>
    </div>

    <!-- Toast container (unchanged) -->
    <div id="toast-container"
         style="position:static; bottom:5px; right:15px;
                display:flex; flex-direction:column; align-items:flex-end;
                gap:6px; z-index:99999;">
    </div>
  </div>
</div>
</div>

<script>
const stopBadge  = document.getElementById('stop-confirmation');

function updateStatus() {
  fetch('/plugins/automover/helpers/status_check.php')
    .then(res => res.json())
    .then(data => {
      document.getElementById('status-text').textContent = data.status;
      document.getElementById('last-run-text').textContent = data.last_run;
    })
    .catch(() => { document.getElementById('status-text').textContent = 'No details available'; });
}
updateStatus();
setInterval(updateStatus, 5000);

document.addEventListener('DOMContentLoaded', function () {
  const form = document.getElementById('automover-settings');
  const poolSelect = document.getElementById('pool');
  const intervalInput = document.getElementById('interval');
  const thresholdInput = document.getElementById('threshold');
  const saveBtn = document.getElementById('save-settings');
  const confirmBadge = document.getElementById('save-confirmation');
  const moveNowBtn = document.getElementById('moveNowBtn');
  const moveNowBadge = document.getElementById('move-now-confirmation');
  let currentPoolSelection = poolSelect.dataset.selected || '';
  const ageFilterCheckbox = document.getElementById('age_based_filter');
  const ageDaysContainer  = document.getElementById('age-days-container');
  const sizeFilterCheckbox= document.getElementById('size_based_filter');
  const sizeMbContainer   = document.getElementById('size-mb-container');

  moveNowBtn.addEventListener('click', () => {
  // Trigger the move action (you may already have this logic elsewhere)
  fetch('/plugins/automover/helpers/run_manual_move.php', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      'X-CSRF-TOKEN': csrfToken
    },
    body: 'csrf_token=' + encodeURIComponent(csrfToken)
  })
  .then(res => res.json())
  .then(data => {
if (data.ok) {
  moveNowBadge.style.display = 'block';
  moveNowBadge.style.opacity = '1';
  moveNowBadge.style.animation = 'flash 0.4s ease';

  setTimeout(() => {
    moveNowBadge.style.opacity = '0';
    moveNowBadge.style.animation = '';
    setTimeout(() => {
      moveNowBadge.style.display = 'none'; // ✅ Collapse space after fade
    }, 400); // match transition duration
  }, 2000);
} else {
      alert('Move Now failed: ' + (data.error || 'Unknown error'));
    }
  })
  .catch(err => {
    console.error('Move Now error:', err);
    alert('Move Now failed');
  });
});

  // NEW: exclusions UI
  const enableExcl = document.getElementById('enable_exclusions');
  const exclRow    = document.getElementById('exclusions-row');
  const exclField  = document.getElementById('exclusions-field');
  const exclCount  = document.getElementById('exclusions-count');

  function toggleAgeInput(){ ageDaysContainer.style.display = ageFilterCheckbox.checked ? 'flex':'none'; }
  ageFilterCheckbox.addEventListener('change', toggleAgeInput); toggleAgeInput();

  function toggleSizeInput(){ sizeMbContainer.style.display = sizeFilterCheckbox.checked ? 'flex':'none'; }
  sizeFilterCheckbox.addEventListener('change', toggleSizeInput); toggleSizeInput();

  function refreshExclusionsVisibility(){
    exclRow.style.display = enableExcl.checked ? 'flex' : 'none';
    if (enableExcl.checked) refreshExclusionCount();
  }
  enableExcl.addEventListener('change', refreshExclusionsVisibility);
  refreshExclusionsVisibility();

  // === QBITTORRENT FIELD TOGGLE ===
const qbitCheckbox = document.getElementById('qbit_script');
const qbitFields = document.getElementById('qbit-fields');
function toggleQbitFields() {
  qbitFields.style.display = qbitCheckbox.checked ? 'block' : 'none';
}
qbitCheckbox.addEventListener('change', toggleQbitFields);
toggleQbitFields();

// --- element refs
const viewBtn   = document.getElementById('viewExclusionsBtn');
const viewModal = document.getElementById('exclusion-view-modal');
const viewClose = document.getElementById('closeExclusionsView');
const editor    = document.getElementById('exclusionsEditor');
const copyBtn   = document.getElementById('copyExclusionsBtn');
const exclusionssaveBtn   = document.getElementById('saveExclusionsBtn');

// --- toast inside modal
const exclusionstoast = document.createElement('div');
exclusionstoast.id = 'exclToast';
exclusionstoast.style.position = 'absolute';
exclusionstoast.style.bottom = '28px';
exclusionstoast.style.left = '50%';
exclusionstoast.style.transform = 'translateX(-50%)';
exclusionstoast.style.color = '#00ff99';
exclusionstoast.style.padding = '8px 14px';
exclusionstoast.style.borderRadius = '6px';
exclusionstoast.style.fontWeight = '600';
exclusionstoast.style.display = 'none';
exclusionstoast.style.zIndex = '10';
if (viewModal) viewModal.querySelector('div').appendChild(exclusionstoast);

function showexclusionstoast(msg, type = 'ok') {
  exclusionstoast.textContent = msg;
  exclusionstoast.style.color = (type === 'ok') ? '#00ff99' : '#ff5555';
  exclusionstoast.style.display = 'block';
  clearTimeout(showexclusionstoast._t);
  showexclusionstoast._t = setTimeout(() => { exclusionstoast.style.display = 'none'; }, 1800);
}

// prevent form submits if buttons live in a <form>
[viewBtn, copyBtn, exclusionssaveBtn, viewClose].forEach(b => {
  if (b) b.setAttribute('type', 'button');
});

// --- open modal and load file
viewBtn.addEventListener('click', e => {
  e.preventDefault();
  viewModal.style.display = 'flex';

  fetch('/plugins/automover/helpers/manage_exclusions.php?action=get' +
        (typeof csrfToken !== 'undefined'
          ? '&csrf_token=' + encodeURIComponent(csrfToken)
          : ''), { cache: 'no-store' })
    .then(r => r.json())
    .then(data => {
      if (data.ok) {
        editor.value = (data.content || '').trim();
      } else {
        editor.value = data.error || '(Error loading exclusions.txt)';
        showexclusionstoast('Error loading file', 'err');
      }
    })
    .catch(err => {
      console.error('GET error:', err);
      editor.value = '(Error loading exclusions.txt)';
      showexclusionstoast('Fetch error', 'err');
    });
});

// --- copy (with fallback)
copyBtn.addEventListener('click', e => {
  e.preventDefault();
  const txt = editor.value || '';

  function fallbackCopy() {
    const ta = document.createElement('textarea');
    ta.value = txt;
    ta.style.position = 'fixed';
    ta.style.left = '-9999px';
    document.body.appendChild(ta);
    ta.select();
    try {
      document.execCommand('copy');
      showexclusionstoast('✅ Copied!');
    } catch {
      showexclusionstoast('Copy failed', 'err');
    }
    document.body.removeChild(ta);
  }

  if (navigator.clipboard && window.isSecureContext) {
    navigator.clipboard.writeText(txt)
      .then(() => showexclusionstoast('Copied!'))
      .catch(() => fallbackCopy());
  } else {
    fallbackCopy();
  }
});

// --- save
exclusionssaveBtn.addEventListener('click', e => {
  e.preventDefault();
  const content = editor.value || '';

fetch('/plugins/automover/helpers/manage_exclusions.php?action=save', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/x-www-form-urlencoded',
    'X-CSRF-TOKEN': csrfToken        // header Unraid validates
  },
  body: 'csrf_token=' + encodeURIComponent(csrfToken) +
        '&content='   + encodeURIComponent(content)
})
  .then(r => r.text())
  .then(text => {
    let data;
    try { data = JSON.parse(text); } catch { throw new Error(text || 'No response'); }
    if (data.ok) showexclusionstoast('✅ Save successful');
    else showexclusionstoast(data.error || 'Save failed', 'err');
  })
  .catch(err => {
    console.error('Save fetch error:', err);
    showexclusionstoast('Save failed', 'err');
  });

});

// --- close modal
viewClose.addEventListener('click', e => {
  e.preventDefault();
  viewModal.style.display = 'none';
});
  
  // Pool list
  function updatePoolUsage() {
    fetch('/plugins/automover/helpers/pool_usage.php')
      .then(res => res.json())
      .then(data => {
        poolSelect.innerHTML = '';
        const pools = Object.keys(data).filter(name => data[name] !== 'N/A');
        if (pools.length === 0) {
          poolSelect.innerHTML = '<option disabled>No pools detected - Is the array started?</option>';
        } else {
          pools.forEach(pool => {
            const option = document.createElement('option');
            option.value = pool;
            option.textContent = `${pool} (${data[pool]}%)`;
            if (pool === currentPoolSelection) option.selected = true;
            poolSelect.appendChild(option);
          });
        }
      })
      .catch(() => { poolSelect.innerHTML = '<option disabled>Error fetching pool usage</option>'; });

    poolSelect.addEventListener('change', () => { currentPoolSelection = poolSelect.value; });
  }
  updatePoolUsage();
  setInterval(updatePoolUsage, 5000);

  // Logs
  const filterInput = document.getElementById('log-filter');
  let filterTimer;
  filterInput.addEventListener('input', () => {
    clearTimeout(filterTimer);
    filterTimer = setTimeout(loadMoverLog, 500);
  });

  function loadLastRunLog() {
    fetch('/plugins/automover/helpers/fetch_last_run_log.php')
      .then(res => res.text())
      .then(data => { document.getElementById('last-run-log').textContent = data || 'No last run data available.'; })
      .catch(() => { document.getElementById('last-run-log').textContent = 'Error loading last run log.'; });
  }
  loadLastRunLog();
  setInterval(loadLastRunLog, 5000);

  function loadMoverLog() {
    const keyword = filterInput.value.trim();
    const query   = keyword ? `?filter=${encodeURIComponent(keyword)}` : '';
    fetch(`/plugins/automover/helpers/fetch_files_moved_log.php${query}`)
      .then(res => res.json())
      .then(data => {
        const logContainer = document.getElementById('automover-log');
        logContainer.innerHTML = '';
        data.log.split('\n').forEach(line => {
          const div = document.createElement('div');
          div.textContent = line;
          if (line.toLowerCase().includes('skipped')) div.classList.add('skipped-line');
          logContainer.appendChild(div);
        });
        document.getElementById('log-counts').innerHTML = `<h3>Total Files Moved: ${data.moved}</h3>`;
      })
      .catch(() => {
        document.getElementById('automover-log').textContent = 'Error loading log.';
        document.getElementById('log-counts').textContent = '';
      });
  }
  loadMoverLog();
  setInterval(loadMoverLog, 5000);

  // Stop
  document.getElementById('stop-button').addEventListener('click', function () {
    const messageBox = document.getElementById('save-messages');
    messageBox.innerHTML = '';
    messageBox.style.display = 'none';

    fetch('/plugins/automover/helpers/stop_cron.php')
      .then(res => res.json())
      .then(() => {
        updateStatus();
        updatePoolUsage();
        stopBadge.style.display = 'inline-block';
        stopBadge.style.opacity = '0';
        stopBadge.style.animation = 'none';
        void stopBadge.offsetWidth;
        stopBadge.style.animation = 'flash .4s ease';
        stopBadge.style.opacity = '1';
        setTimeout(() => { stopBadge.style.opacity = '0'; stopBadge.style.display = 'none'; }, 3000);
      })
      .catch(() => { document.getElementById('status-text').textContent = 'Error stopping cron'; });
  });

  // Validation
  function validateField(input, rules, warningId) {
    const value = input.value.trim();
    const number = parseFloat(value);
    const invalid = isNaN(number) || (rules.min !== undefined && number < rules.min) || (rules.max !== undefined && number > rules.max);
    input.classList.toggle('invalid', invalid);
    document.getElementById(warningId).style.display = invalid ? 'block' : 'none';
    return !invalid;
  }
  // === Qbittorrent Validation ===
const qbitHostInput = document.getElementById('qbit_host');
const qbitUserInput = document.getElementById('qbit_user');
const qbitPassInput = document.getElementById('qbit_pass');
const qbitDaysFromInput = document.getElementById('qbit_days_from');
const qbitDaysToInput = document.getElementById('qbit_days_to');

  intervalInput.addEventListener('input', () => validateField(intervalInput, { min: 5 }, 'interval-warning'));
  thresholdInput.addEventListener('input', () => validateField(thresholdInput, { min: 0, max: 100 }, 'threshold-warning'));
  const ageDaysInput = document.getElementById('age_days');
  ageDaysInput.addEventListener('input', () => validateField(ageDaysInput, { min: 1 }, 'age-days-warning'));
  const sizeMbInput = document.getElementById('size_mb');
  sizeMbInput.addEventListener('input', () => validateField(sizeMbInput, { min: 1 }, 'size-mb-warning'));

  // === Qbittorrent Validation ===
function validateQbitFields() {
  if (!qbitCheckbox.checked) return true; // skip validation if not enabled

  let valid = true;

  // Host, user, pass required
  if (qbitHostInput.value.trim() === "") {
    qbitHostInput.classList.add("invalid");
    document.getElementById("qbit-host-warning").style.display = "block";
    valid = false;
  } else {
    qbitHostInput.classList.remove("invalid");
    document.getElementById("qbit-host-warning").style.display = "none";
  }

  if (qbitUserInput.value.trim() === "") {
    qbitUserInput.classList.add("invalid");
    document.getElementById("qbit-user-warning").style.display = "block";
    valid = false;
  } else {
    qbitUserInput.classList.remove("invalid");
    document.getElementById("qbit-user-warning").style.display = "none";
  }

  if (qbitPassInput.value.trim() === "") {
    qbitPassInput.classList.add("invalid");
    document.getElementById("qbit-pass-warning").style.display = "block";
    valid = false;
  } else {
    qbitPassInput.classList.remove("invalid");
    document.getElementById("qbit-pass-warning").style.display = "none";
  }

  // Days validation
  const fromVal = parseInt(qbitDaysFromInput.value, 10);
  const toVal = parseInt(qbitDaysToInput.value, 10);

  const validFrom = !isNaN(fromVal) && fromVal >= 0 && fromVal <= 99999;
  const validTo = !isNaN(toVal) && toVal >= 1 && toVal <= 99999;
  const validOrder = validFrom && validTo && fromVal < toVal;

  qbitDaysFromInput.classList.toggle("invalid", !validFrom);
  document.getElementById("qbit-days-from-warning").style.display = validFrom ? "none" : "block";

  qbitDaysToInput.classList.toggle("invalid", !validTo);
  document.getElementById("qbit-days-to-warning").style.display = validTo ? "none" : "block";

  document.getElementById("qbit-days-order-warning").style.display = validOrder ? "none" : "block";

  if (!validFrom || !validTo || !validOrder) valid = false;

  return valid;
}

// 🔁 Live validation for qBittorrent fields
[qbitHostInput, qbitUserInput, qbitPassInput, qbitDaysFromInput, qbitDaysToInput].forEach(input => {
  if (input) input.addEventListener('input', validateQbitFields);
});

// 🔁 Also revalidate when toggling the "Enable Qbittorrent Script" checkbox
if (qbitCheckbox) qbitCheckbox.addEventListener('change', validateQbitFields);

// 🔁 Dynamic validation between Days From and Days To
[qbitDaysFromInput, qbitDaysToInput].forEach(input => {
  if (input) {
    input.addEventListener('input', () => {
      const fromVal = parseInt(qbitDaysFromInput.value, 10);
      const toVal = parseInt(qbitDaysToInput.value, 10);
      const validOrder = !isNaN(fromVal) && !isNaN(toVal) && fromVal < toVal;

      document.getElementById("qbit-days-order-warning").style.display = validOrder ? "none" : "block";
      qbitDaysFromInput.classList.toggle("invalid", !validOrder);
      qbitDaysToInput.classList.toggle("invalid", !validOrder);
    });
  }
});

  // ===== Exclusions picker (helper + csrf_token) =====
  const modal = document.getElementById('exclusion-modal');
  const grid  = document.getElementById('picker-grid');
  const crumbs= document.getElementById('crumbs');
  const btnUp = document.getElementById('btn-up');
  const btnClose = document.getElementById('btn-close');
  const btnAdd = document.getElementById('btn-add');
  const btnRemove = document.getElementById('btn-remove');
  const toast = document.getElementById('picker-toast');
  let currentPath = '/mnt';

let toastQueueDelay = 0; // keeps a running delay so toasts stagger

function showToast(msg, type = 'ok') {
  const container = document.getElementById('toast-container');
  if (!container) return;

  const t = document.createElement('div');
  t.textContent = msg;

  t.style.color = type === 'err' ? '#ffaaaa' : '#00ff99';
  t.style.padding = '0px 0px';
  t.style.borderRadius = '0px';
  t.style.fontWeight = '600';
  t.style.boxShadow = '0 0 6px rgba(0,0,0,0.3)';
  t.style.opacity = '0';
  t.style.transform = 'translateX(30px)'; // slide from right
  t.style.transition = 'opacity .3s ease, transform .3s ease';
  t.style.minWidth = '160px';
  t.style.textAlign = 'right';

  container.appendChild(t);

  // apply a small delay so multiple toasts don't appear at the exact same time
  const delay = toastQueueDelay;
  toastQueueDelay += 1000; // 1s between toasts

  setTimeout(() => {
    t.style.opacity = '1';
    t.style.transform = 'translateX(0)';
  }, delay + 50);

  // fade out after it’s been visible for ~2 s
  setTimeout(() => {
    t.style.opacity = '0';
    t.style.transform = 'translateX(30px)';
    setTimeout(() => t.remove(), 300);
  }, delay + 2350);

  // reset queue after a few seconds (so future toasts don't keep offsetting forever)
  setTimeout(() => { toastQueueDelay = 0; }, delay + 3000);
}

  function openPicker(){ modal.style.display='flex'; loadDir('/mnt'); }
  function closePicker(){ modal.style.display='none'; }

  exclField.addEventListener('click', openPicker);
  btnClose.addEventListener('click', closePicker);

function buildCrumbs(path) {
  crumbs.innerHTML = '';

  // Normalize and split
  const cleanPath = path.replace(/\/+$/, '');
  if (!cleanPath.startsWith('/mnt')) {
    loadDir('/mnt');
    return;
  }

  const parts = cleanPath.split('/').filter(Boolean);
  let accum = '';

  // Add root first
  const root = document.createElement('span');
  root.textContent = '/mnt';
  root.className = 'crumb';
  root.dataset.path = '/mnt';
  crumbs.appendChild(root);

  // Build deeper segments
  for (let i = 1; i < parts.length; i++) {
    const seg = parts[i];
    const sep = document.createElement('span');
    sep.textContent = ' / ';
    sep.className = 'sep';
    crumbs.appendChild(sep);

    accum = accum ? accum + '/' + seg : '/mnt/' + seg;

    const a = document.createElement('span');
    a.textContent = seg;
    a.className = 'crumb';
    a.dataset.path = accum;
    crumbs.appendChild(a);
  }
}

// ✅ Delegated click handler (only one global listener needed)
crumbs.addEventListener('click', e => {
  const crumb = e.target.closest('.crumb');
  if (!crumb) return;
  const path = crumb.dataset.path;
  if (!path) return;

  e.preventDefault();
  e.stopPropagation();
  loadDir(path);
});

  function loadDir(path){
    const url = `/plugins/automover/helpers/update_exclusions.php?action=list_dir&path=${encodeURIComponent(path)}&csrf_token=${encodeURIComponent(csrf_token)}`;
    fetch(url)
      .then(r=>r.json())
      .then(data=>{
        if (!data.ok) throw new Error('list_dir failed');
        currentPath = data.path || path;
        buildCrumbs(currentPath);
        grid.innerHTML = '';
        data.items.forEach(it=>{
const row = document.createElement('div');
row.className = 'row';

// --- Checkbox ---
const cb = document.createElement('input');
cb.type = 'checkbox';
cb.dataset.path = it.path;

// Disable if it's a root-level /mnt entry (like /mnt/disk1, /mnt/cache, etc.)
if (/^\/mnt\/[^/]+$/.test(it.path)) {
  cb.disabled = true;
  cb.title = "Can't exclude entire disks or root pools";
  cb.style.cursor = 'not-allowed';
}

// --- Name / Icon / Color ---
const name = document.createElement('div');
name.className = 'name';
name.title = it.path;

// Folder
if (it.isDir) {
  name.innerHTML = `<span class="icon">📁</span><span class="label">${it.name}</span>`;
  name.style.color = 'var(--primary-blue)';
  name.style.cursor = 'pointer';
  name.addEventListener('click', () => loadDir(it.path));
} else {
  // File
  name.innerHTML = `<span class="icon">📄</span><span class="label">${it.name}</span>`;
  name.style.color = '#fff';
}

// --- Assemble Row ---
row.appendChild(cb);
row.appendChild(name);
grid.appendChild(row);
        });
      })
      .catch(()=>showToast('Error loading directory'));
  }

  btnUp.addEventListener('click', ()=>{
    if (!currentPath || currentPath === '/mnt') return;
    const up = currentPath.replace(/\/+$/,'').split('/').slice(0,-1).join('/') || '/mnt';
    loadDir(up.startsWith('/mnt') ? up : '/mnt');
  });

  function selectedPaths(){ return Array.from(grid.querySelectorAll('input[type="checkbox"]:checked')).map(cb=>cb.dataset.path); }

  function refreshExclusionCount(){
    fetch(`/plugins/automover/helpers/update_exclusions.php?action=get_exclusion_count&csrf_token=${encodeURIComponent(csrf_token)}`)
      .then(r=>r.json())
      .then(d=>{
        if (d.ok){
          exclCount.textContent = `${d.count} item${d.count===1?'':'s'}`;
          exclField.value = d.count>0 ? `Click to open file picker` : 'Click to open file picker';
        }
      }).catch(()=>{});
  }

  btnAdd.addEventListener('click', ()=>{
    const paths = selectedPaths();
    if (paths.length===0){ showToast('No selection'); return; }
    const body = new URLSearchParams(); body.append('csrf_token', csrf_token); paths.forEach(p=>body.append('paths[]', p));
    fetch('/plugins/automover/helpers/update_exclusions.php?action=add_exclusions', { method:'POST', body })
      .then(r=>r.json()).then(d=>{
        if (d.ok){ showToast('✅ Added'); refreshExclusionCount(); }
        else showToast('Add failed');
      }).catch(()=>showToast('Add failed'));
  });

  btnRemove.addEventListener('click', ()=>{
    const paths = selectedPaths();
    if (paths.length===0){ showToast('No selection'); return; }
    const body = new URLSearchParams(); body.append('csrf_token', csrf_token); paths.forEach(p=>body.append('paths[]', p));
    fetch('/plugins/automover/helpers/update_exclusions.php?action=remove_exclusions', { method:'POST', body })
      .then(r=>r.json()).then(d=>{
        if (d.ok){ showToast('✅ Removed'); refreshExclusionCount(); }
        else showToast('Remove failed');
      }).catch(()=>showToast('Remove failed'));
  });

  btnClose.addEventListener('click', () => {
  addExtBtn.style.display = 'none';
  removeExtBtn.style.display = 'none';
  selectedExts.clear();
  modal.style.display = 'none';
});

// WILDCARD
const addExtBtn = document.getElementById('addExtBtn');
const removeExtBtn = document.getElementById('removeExtBtn');
let selectedExts = new Set();

document.addEventListener('change', (e) => {
  if (!e.target.matches('#picker-grid input[type="checkbox"]')) return;

  // collect all checked file extensions
  selectedExts.clear();
  const checked = Array.from(document.querySelectorAll('#picker-grid input[type="checkbox"]:checked'));
  checked.forEach(cb => {
    if (cb.dataset.isdir === 'true') return; // skip folders
    const name = cb.dataset.path.split('/').pop();
    const parts = name.split('.');
    if (parts.length > 1) selectedExts.add(parts.pop());
  });

  if (selectedExts.size > 0) {
    const label = Array.from(selectedExts).map(e => `*.${e}`).join(', ');
    addExtBtn.textContent = `Add extensions as wildcards`;
    removeExtBtn.textContent = `Remove extensions as wildcards`;
    addExtBtn.style.display = 'inline-block';
    removeExtBtn.style.display = 'inline-block';
  } else {
    addExtBtn.style.display = 'none';
    removeExtBtn.style.display = 'none';
  }
});

// ✅ Add extensions as wildcards
addExtBtn.addEventListener('click', () => {
  if (selectedExts.size === 0) return;

  const body = new URLSearchParams();
  body.append('csrf_token', csrf_token);
  Array.from(selectedExts).forEach(ext => body.append('paths[]', `*.${ext}`));

  fetch('/plugins/automover/helpers/update_exclusions.php?action=add_exclusions', {
    method: 'POST',
    body
  })
    .then(r => r.json())
    .then(d => {
      if (d.ok) {
        let delay = 0;
        Array.from(selectedExts).forEach(ext => {
          setTimeout(() => showToast(`✅ Added *.${ext}`), delay);
          delay += 350;
        });
      } else showToast('Failed to add wildcard(s)', 'err');
    })
    .catch(err => {
      console.error('Add wildcard error:', err);
      showToast('Error adding wildcard(s)', 'err');
    });
});

// ✅ Remove extensions as wildcards
removeExtBtn.addEventListener('click', () => {
  if (selectedExts.size === 0) return;

  const body = new URLSearchParams();
  body.append('csrf_token', csrf_token);
  Array.from(selectedExts).forEach(ext => body.append('paths[]', `*.${ext}`));

  fetch('/plugins/automover/helpers/update_exclusions.php?action=remove_exclusions', {
    method: 'POST',
    body
  })
    .then(r => r.json())
    .then(d => {
      if (d.ok) {
        let delay = 0;
        Array.from(selectedExts).forEach(ext => {
          setTimeout(() => showToast(`✅ Removed *.${ext}`), delay);
          delay += 350;
        });
      } else showToast('Failed to remove wildcard(s)', 'err');
    })
    .catch(err => {
      console.error('Remove wildcard error:', err);
      showToast('Error removing wildcard(s)', 'err');
    });
});

  // Save & Start
  saveBtn.addEventListener('click', function () {
    const intervalValid  = validateField(intervalInput, { min: 5 }, 'interval-warning');
    const thresholdValid = validateField(thresholdInput, { min: 0, max: 100 }, 'threshold-warning');
    const ageDaysInput = document.getElementById('age_days');
    const sizeMbInput  = document.getElementById('size_mb');
    const ageDaysValid = !document.getElementById('age_based_filter').checked || validateField(ageDaysInput, { min: 1 }, 'age-days-warning');
    const sizeMbValid  = !document.getElementById('size_based_filter').checked || validateField(sizeMbInput,  { min: 1 }, 'size-mb-warning');
    const qbitValid = validateQbitFields();
    const allValid = intervalValid && thresholdValid && ageDaysValid && sizeMbValid && qbitValid;

    const messageBox = document.getElementById('save-messages');
    if (!allValid) {
      form.classList.add('shake'); setTimeout(()=>form.classList.remove('shake'), 300);
      messageBox.innerHTML = `<div style="color:red;">⚠️ Please correct the highlighted warnings.</div>`;
      messageBox.style.display = 'block';
      return;
    }

    // Ensure exclusions file exists if enabled
    const ensurePromise = enableExcl.checked
      ? fetch(`/plugins/automover/helpers/update_exclusions.php?action=ensure_exclusions&csrf_token=${encodeURIComponent(csrf_token)}`)
          .then(r=>r.json()).then(d=>!!d.ok).catch(()=>false)
      : Promise.resolve(true);

    ensurePromise.then(ok=>{
      if (!ok) {
        messageBox.innerHTML = `<div style="color:red;">❌ Could not create exclusions.txt</div>`;
        messageBox.style.display = 'block';
        return;
      }

      const settings = {
        POOL_NAME: poolSelect.value,
        THRESHOLD: thresholdInput.value,
        INTERVAL: intervalInput.value,
        DRY_RUN: document.getElementById('dry_run').checked ? 'yes' : 'no',
        ALLOW_DURING_PARITY: document.getElementById('allow_during_parity').checked ? 'yes' : 'no',
        AUTOSTART: document.getElementById('autostart').checked ? 'yes' : 'no',
        AGE_BASED_FILTER: document.getElementById('age_based_filter').checked ? 'yes' : 'no',
        AGE_DAYS: ageDaysInput.value,
        SIZE_BASED_FILTER: document.getElementById('size_based_filter').checked ? 'yes' : 'no',
        SIZE_MB: sizeMbInput.value,
        EXCLUSIONS_ENABLED: enableExcl.checked ? 'yes' : 'no',
        QBITTORRENT_SCRIPT: qbitCheckbox.checked ? 'yes' : 'no',
        QBITTORRENT_HOST: document.getElementById('qbit_host').value,
        QBITTORRENT_USERNAME: document.getElementById('qbit_user').value,
        QBITTORRENT_PASSWORD: document.getElementById('qbit_pass').value,
        QBITTORRENT_DAYS_FROM: document.getElementById('qbit_days_from').value,
        QBITTORRENT_DAYS_TO: document.getElementById('qbit_days_to').value,
        QBITTORRENT_STATUS: document.getElementById('qbit_status').value,
      };

const ordered = [
  ['POOL_NAME', settings.POOL_NAME],
  ['THRESHOLD', settings.THRESHOLD],
  ['INTERVAL', settings.INTERVAL],
  ['DRY_RUN', settings.DRY_RUN],
  ['ALLOW_DURING_PARITY', settings.ALLOW_DURING_PARITY],
  ['AUTOSTART', settings.AUTOSTART],
  ['AGE_BASED_FILTER', settings.AGE_BASED_FILTER],
  ['AGE_DAYS', settings.AGE_DAYS],
  ['SIZE_BASED_FILTER', settings.SIZE_BASED_FILTER],
  ['SIZE_MB', settings.SIZE_MB],
  ['EXCLUSIONS_ENABLED', settings.EXCLUSIONS_ENABLED],
  ['QBITTORRENT_SCRIPT', settings.QBITTORRENT_SCRIPT],
  ['QBITTORRENT_HOST', settings.QBITTORRENT_HOST],
  ['QBITTORRENT_USERNAME', settings.QBITTORRENT_USERNAME],
  ['QBITTORRENT_PASSWORD', settings.QBITTORRENT_PASSWORD],
  ['QBITTORRENT_DAYS_FROM', settings.QBITTORRENT_DAYS_FROM],
  ['QBITTORRENT_DAYS_TO', settings.QBITTORRENT_DAYS_TO],
  ['QBITTORRENT_STATUS', settings.QBITTORRENT_STATUS],
];
const query = new URLSearchParams(ordered).toString();
      const confirmBadge = document.getElementById('save-confirmation');
      messageBox.innerHTML = '';
      messageBox.style.display = 'block';

      fetch('/plugins/automover/helpers/save_settings.php?' + query + '&csrf_token=' + encodeURIComponent(csrf_token))
        .then(res => res.text())
        .then(text => {
          let data;
          try { data = JSON.parse(text); } catch(e) { throw new Error('Invalid JSON'); }
          if (data.status === 'ok') {
            confirmBadge.style.display='inline-block'; confirmBadge.style.opacity='0'; confirmBadge.style.animation='none'; void confirmBadge.offsetWidth; confirmBadge.style.animation='flash .4s ease'; confirmBadge.style.opacity='1';
            setTimeout(()=>{ confirmBadge.style.opacity='0'; confirmBadge.style.display='none'; }, 3000);

            if (Array.isArray(data.messages)) data.messages.forEach(msg=>{ const line=document.createElement('div'); line.textContent=msg; messageBox.appendChild(line); });

            fetch('/plugins/automover/helpers/start_cron.php?' + new URLSearchParams(settings) + '&csrf_token=' + encodeURIComponent(csrf_token))
              .then(res => res.json())
              .then(startData => {
                updateStatus();
                if (Array.isArray(startData.messages)) startData.messages.forEach(msg=>{ const line=document.createElement('div'); line.textContent=msg; messageBox.appendChild(line); });
                          if (startData.flag_changed) {
            if (moverCheckbox) {
              moverCheckbox.checked = false;
              const notice = document.createElement('div');
              notice.style.color = 'orange';
              notice.textContent = '';
              messageBox.appendChild(notice);
            }
          }
              })
              .catch(() => {
                document.getElementById('status-text').textContent = 'Error starting cron';
                messageBox.innerHTML += `<div style="color:red;">❌ Error starting Automover</div>`;
              });
          } else {
            messageBox.innerHTML = `<div style="color:red;">❌ ${data.message || 'Save failed'}</div>`;
          }
        })
        .catch(() => { messageBox.innerHTML = `<div style="color:red;">❌ Save request failed</div>`; });
    });
  });

  // Initial counts
  function refreshExclusionCount(){
    fetch(`/plugins/automover/helpers/update_exclusions.php?action=get_exclusion_count&csrf_token=${encodeURIComponent(csrf_token)}`)
      .then(r=>r.json())
      .then(d=>{
        if (d.ok){
          exclCount.textContent = `${d.count} item${d.count===1?'':'s'}`;
          exclField.value = d.count>0 ? `Click to open file picker` : 'Click to open file picker';
        }
      }).catch(()=>{});
  }
  refreshExclusionCount();
});

// Keep pool-usage warning + CA update check
document.addEventListener("DOMContentLoaded", () => {
  const poolSelect = document.getElementById('pool');
  const poolWarning = document.getElementById('pool-warning');
  function checkPoolUsage(poolName){
    if (!poolName) { poolWarning.style.display='none'; return; }
    fetch(`/plugins/automover/helpers/check_pool_usage.php?pool=${encodeURIComponent(poolName)}`)
      .then(res=>res.json())
      .then(data=>{ poolWarning.style.display = data.in_use ? 'none' : 'block'; })
      .catch(()=>{ poolWarning.style.display = 'none'; });
  }
  poolSelect.addEventListener('change', () => checkPoolUsage(poolSelect.value));
  setTimeout(() => { checkPoolUsage(poolSelect.value); }, 250);
});
if ( typeof caPluginUpdateCheck === "function" ) {
  caPluginUpdateCheck("automover.plg",{name:"Automover"});
}

document.addEventListener('DOMContentLoaded', () => {
  const qbitToggle = document.getElementById('qbit_script');
  const warning = document.getElementById('python-warning');
  const pythonInstalled = warning.dataset.pythonInstalled === '1';

  const updateWarningVisibility = () => {
    if (qbitToggle.checked && !pythonInstalled) {
      warning.style.display = 'block';
    } else {
      warning.style.display = 'none';
    }
  };

  if (qbitToggle) {
    qbitToggle.addEventListener('change', updateWarningVisibility);
    updateWarningVisibility(); // Run on page load to reflect current state
  }
});

</script>
<?php if (file_exists('/boot/config/plugins/ca.mover.tuning.plg')): ?>
  <div id="mover-tuning-warning" style="
    position: fixed;
    bottom: 35px;
    left: 50%;
    transform: translateX(-50%);
    background: #222;
    color: #ffcc00;
    padding: 14px 45px 14px 20px;
    border-radius: 8px;
    font-weight: 600;
    font-size: 14px;
    box-shadow: 0 0 10px rgba(255,255,0,0.4);
    z-index: 999999;
    max-width: 80%;
    text-align: center;
  ">
    ⚠️ Mover Tuning plugin appears to be installed.<br>
    Having both can result in conflicts between <b>Mover Tuning</b> and <b>Automover</b>.<br>
    Consider uninstalling one to avoid incompatibility issues.

    <!-- ✅ Close “X” -->
    <button id="mover-tuning-close" style="
      position: absolute;
      top: -16px;
      right: -42px;
      background: transparent;
      border: none;
      color: #ffcc00;
      font-size: 18px;
      font-weight: bold;
      cursor: pointer;
      line-height: 1;
    " title="Dismiss this warning">×</button>
  </div>

  <script>
    // Close handler
    document.addEventListener('DOMContentLoaded', () => {
      const closeBtn = document.getElementById('mover-tuning-close');
      const popup = document.getElementById('mover-tuning-warning');
      if (closeBtn && popup) {
        closeBtn.addEventListener('click', () => {
          popup.style.opacity = '0';
          popup.style.transition = 'opacity 0.3s ease';
          setTimeout(() => popup.remove(), 300);
        });
      }
    });
  </script>
<?php endif; ?>
