Menu="Utilities"
Type="xmenu"
Title="Automover"
Icon="icon.png"
Tag="icon.png"
Markdown="false"
---
<?php
$cfgPath = '/boot/config/plugins/automover/settings.cfg';

// Create default if missing
if (!file_exists($cfgPath)) {
    $defaults = [
        'POOL_NAME' => 'cache',
        'THRESHOLD' => 50,
        'INTERVAL' => 60,
        'DRY_RUN' => 'no',
        'ALLOW_DURING_PARITY_CHECK' => 'no',
        'AUTOSTART' => 'no',
        'DISABLE_UNRAID_MOVER_SCHEDULE' => 'no'
    ];
    $configText = '';
    foreach ($defaults as $key => $value) {
        $configText .= "$key=\"$value\"\n";
    }
    @file_put_contents($cfgPath, $configText);
}

$settings = parse_ini_file($cfgPath) ?: [];
?>
<style>
:root {
  --primary-blue: #00aaff;
  --status-green: #2ECC40;
}

#automover-settings {
  width: fit-content;
  padding: 20px;
  background: #111111;
  border-radius: 12px;
  box-shadow: 0 0 12px rgba(0, 128, 128, 0.3);
  text-align: left;
}

.form-row {
  flex-direction: column;
  gap: 15px;
  margin-bottom: 20px;
}

label {
  color: var(--primary-blue);
  font-weight: bold;
  margin-bottom: 5px;
}

input, select {
  border: 1px solid var(--primary-blue);
  border-radius: 5px;
  padding: 8px;
  background: #111111;
  color: #ffffff;
}

button {
  margin-right: 10px;
  padding: 8px 15px;
  border: none;
  color: white;
  border-radius: 4px;
  cursor: pointer;
}

.checkbox-row {
  justify-content: space-evenly;
  align-items: center;
  margin-top: 25px;
  margin-bottom: 15px;
}

.form-check {
  display: inline-flex;
  align-items: center;
  gap: 8px;
  color: var(--primary-blue);
  cursor: pointer;
  transition: color 0.2s ease;
}

input[type="checkbox"] {
  accent-color: var(--primary-blue);
  width: 16px;
  height: 16px;
  cursor: pointer;
}

.form-check input {
  margin-right: 8px;
  vertical-align: middle;
}

.status-container {
  margin-top: 20px;
}

.status-row {
  display: flex;
  align-items: center;
  margin-bottom: 6px;
}

.status-label {
  color: var(--primary-blue);
  font-weight: bold;
  width: 75px;
}

#status-text,
#last-run-text {
  color: var(--status-green);
}

.tooltip {
  position: relative;
  display: inline-block;
}

.tooltip:hover::after {
  content: attr(data-tooltip);
  position: absolute;
  bottom: 125%;
  left: 0;
  background-color: #333;
  color: #fff;
  padding: 6px 10px;
  border-radius: 4px;
  white-space: nowrap;
  font-size: 12px;
  opacity: 0.9;
  z-index: 10;
  text-transform: none;
}

.form-pair {
  display: flex;
  align-items: flex-start;
  gap: 10px;
  margin-bottom: 15px;
}

.input-wrapper {
  display: flex;
  flex-direction: column;
}

.form-pair label {
  color: var(--primary-blue);
  font-weight: bold;
  width: 100px;
  margin-right: 10px;
}

.form-pair input,
.form-pair select {
  background: #111111;
  color: #fff;
}

.short-input {
  width: 60px;
  min-width: 60px;
  max-width: 60px;
  flex: 0 0 auto;
}

.short-input-filter {
  width: 150px;
  min-width: 150px;
  max-width: 150px;
  flex: 0 0 auto;
}

#pool.short-input {
  min-width: 60px;
  max-width: 100%;
  flex: 0 0 auto;
}

input.invalid {
  border-color: red;
  color: red;
}

.field-warning {
  display: none;
  color: red;
  font-size: 12px;
  margin-top: 4px;
}

input.invalid + .field-warning {
  display: block;
}

@keyframes shake {
  0%, 100% { transform: translateX(0); }
  25% { transform: translateX(-5px); }
  50% { transform: translateX(5px); }
  75% { transform: translateX(-5px); }
}

#automover-settings.shake {
  animation: shake 0.3s;
}

#save-confirmation {
  display: block;
  clear: both;
  background: var(--primary-blue);
  color: white;
  font-weight: bold;
  padding: 6px 12px;
  border-radius: 6px;
  margin-top: 12px;
  opacity: 0;
  transition: opacity 0.4s ease;
  animation: flash 0.4s ease;
}

#start-confirmation {
  display: block;
  clear: both;
  background: var(--primary-blue);
  color: white;
  font-weight: bold;
  padding: 6px 12px;
  border-radius: 6px;
  margin-top: 12px;
  opacity: 0;
  transition: opacity 0.4s ease;
  animation: flash 0.4s ease;
}

#stop-confirmation {
  display: block;
  clear: both;
  background: var(--primary-blue);
  color: white;
  font-weight: bold;
  padding: 6px 12px;
  border-radius: 6px;
  margin-top: 12px;
  opacity: 0;
  transition: opacity 0.4s ease;
  animation: flash 0.4s ease;
}

@keyframes flash {
  0% { opacity: 0; transform: scale(1); }
  50% { opacity: 1; transform: scale(1.1); }
  100% { opacity: 1; transform: scale(1); }
}

/* Wrap both boxes side by side */
#automover-wrapper {
  display: flex;
  align-items: flex-start;
  gap: 30px; /* spacing between the boxes */
  flex-wrap: wrap;
}

/* Existing settings box */
#automover-settings {
  flex: 1;
  max-width: 450px;
}

/* New log box */
#moved-log-container {
  flex: 1;
  max-width: 850px;
  max-height: 90vh;
  overflow-y: auto;
  background: #111111;
  border-radius: 12px;
  box-shadow: 0 0 12px rgba(0, 128, 128, 0.3);
  padding: 20px;
  font-family: sans-serif;
  color: #f0f8ff;
}

#moved-log-container h3 {
  color: var(--primary-blue);
  font-size: 18px;
  margin-bottom: 12px;
}

#automover-log {
  white-space: pre-wrap;
  word-break: break-word;
  background-color: #111111;
  padding: 10px;
  border-radius: 8px;
  font-family: monospace;
  font-size: 13px;
  color: #00ffaa;
  border: 1px solid var(--primary-blue);
  max-height: 42vh;
  overflow-y: auto;
}

#log-counts {
  margin-top: 12px;
  color: var(--primary-blue);
  font-size: 14px;
}

.skipped-line {
  color: #ffd700; /* bright yellow */
}

.log-header {
  display: flex;
  justify-content: space-between;
  align-items: baseline;
  margin-bottom: 12px;
}

.log-header h3 {
  color: var(--primary-blue);
  font-size: 18px;
  margin: 0;
}

.log-stats {
  text-align: right;
  font-size: 14px;
  color: #00ffaa;
  white-space: nowrap;
}

#last-run-container {
  flex: 1;
  max-width: 420px;
  max-height: 90vh;
  overflow-y: auto;
  background: #111111;
  border-radius: 12px;
  box-shadow: 0 0 12px rgba(0, 128, 128, 0.3);
  padding: 10px;
  font-family: sans-serif;
  color: #f0f8ff;
}

#last-run-container h3 {
  color: var(--primary-blue);
  font-size: 18px;
  margin-bottom: 12px;
}

#last-run-log {
  white-space: pre-wrap;
  word-break: break-word;
  background-color: #111111;
  padding: 10px;
  border-radius: 8px;
  font-family: monospace;
  font-size: 13px;
  color: #00ffaa;
  border: 1px solid var(--primary-blue);
  max-height: 55vh;
  overflow-y: auto;
}

#log-filter {
  background-color: #111111; /* dark background to match log panel */
  border: 1px solid var(--primary-blue); /* your glowing blue theme */
  color: #00ffaa; /* same green as mover log text */
  padding: 8px 12px;
  border-radius: 6px;
  font-size: 13px;
  font-family: monospace;
  width: 100px;
  box-shadow: 0 0 6px rgba(0, 128, 128, 0.3); /* soft glow */
  transition: border-color 0.2s ease-in-out, box-shadow 0.2s;
}

#log-filter:focus {
  border-color: #00bfff; /* blue glow on focus */
  box-shadow: 0 0 10px rgba(0, 191, 255, 0.5);
  outline: none;
}

#log-filter::placeholder {
  color: #008080; /* subtle placeholder tone */
}

input[type="number"].short-input {
  appearance: auto;
  -webkit-appearance: auto;
  -moz-appearance: auto;
}

.select-pool {
  appearance: none;
  width: auto;
  max-width: 100%;     /* Prevent overflow */
  white-space: nowrap; /* Prevent wrapping */
  overflow: hidden;
  text-overflow: ellipsis;
  transition: width 0.2s ease-in-out;
}

.select-pool.expanded {
  width: auto !important;
}

#save-messages div {
  opacity: 1;
  transition: opacity 0.6s ease;
}
</style>

<div id="automover-wrapper">
  <!-- Settings Form -->
  <form id="automover-settings">
    <!-- Pool -->
    <div class="form-pair">
      <label for="pool" class="tooltip" data-tooltip="Choose which pool to monitor for disk usage.">Pool:</label>
      <select id="pool" class="select-pool" data-selected="<?php echo htmlspecialchars($settings['POOL_NAME'] ?? '') ?>"></select>
    </div>

    <div id="pool-warning" class="field-warning">⚠️ This pool is not assigned to any share that has it being used in mover direction in either direction. You might want to use a different pool.</div>
<br>

    <!-- Threshold -->
    <div class="form-pair">
      <label for="threshold" class="tooltip" data-tooltip="Set the disk usage percentage threshold that triggers the mover.">Threshold (%):</label>
      <div class="input-wrapper">
        <input type="number" id="threshold" class="short-input" min="0" max="100" step="1"
          value="<?php echo htmlspecialchars($settings['THRESHOLD'] ?? '') ?>">
        <div id="threshold-warning" class="field-warning">Threshold must be between 0–100</div>
      </div>
    </div>

    <!-- Interval -->
    <div class="form-pair">
      <label for="interval" class="tooltip" data-tooltip="Interval between usage checks in minutes.">Interval (minutes):</label>
      <div class="input-wrapper">
        <input type="number" id="interval" class="short-input" min="1" step="1"
          value="<?php echo htmlspecialchars($settings['INTERVAL'] ?? '') ?>">
        <div id="interval-warning" class="field-warning">Interval must be at least 1</div>
      </div>
    </div>

    <!-- Checkboxes -->
    <div class="checkbox-row">
      <label class="form-check tooltip" data-tooltip="Enable to simulate moves without actually transferring files.">
        <input type="checkbox" id="dry_run"
          <?php echo ($settings['DRY_RUN'] ?? '') === 'yes' ? 'checked' : '' ?>> Dry Run
      </label>

      <label class="form-check tooltip" data-tooltip="Allow Automover to run even when Unraid is doing a parity check.">
        <input type="checkbox" id="allow_during_parity"
          <?php echo ($settings['ALLOW_DURING_PARITY_CHECK'] ?? '') === 'yes' ? 'checked' : '' ?>> Allow During Parity Check
      </label>

      <label class="form-check tooltip" data-tooltip="Start Automover automatically when Unraid boots.">
        <input type="checkbox" id="autostart"
          <?php echo ($settings['AUTOSTART'] ?? '') === 'yes' ? 'checked' : '' ?>> Autostart on Boot
      </label>

      <label class="form-check tooltip" data-tooltip="Disables Unraid's built-in mover schedule.">
        <input type="checkbox" id="disable_unraid_mover_schedule"
          <?php echo ($settings['DISABLE_UNRAID_MOVER_SCHEDULE'] ?? '') === 'yes' ? 'checked' : '' ?>> Disable Unraid Mover Schedule
      </label>
    </div>

    <!-- Buttons -->
    <div class="form-group">
      <button type="button" id="save-settings" class="btn tooltip" data-tooltip="Save your configuration settings and start the automover service.">Save & Start</button>
      <button type="button" id="stop-button" class="btn tooltip" data-tooltip="Stop Automover service.">Stop</button>
    </div>

    <!-- Confirmations -->
    <div id="save-confirmation" style="display: none; margin-top: 10px;">✅ Saved Settings</div>
    <div id="start-confirmation" style="display: none; margin-top: 10px;">✅ Started Automover</div>
    <div id="stop-confirmation" style="display: none; margin-top: 10px;">✅ Stopping Automover</div>

    <!-- Start cron messages -->
<div id="save-messages" style="
  display: none;
  margin-top: 10px;
  margin-bottom: 20px;
  background: #111;
  border-radius: 6px;
  font-family: monospace;
  color: red;
"></div>

    <!-- Status -->
    <div class="status-container">
      <div class="status-row">
        <span class="status-label">Status:</span>
        <span id="status-text">Stopped</span>
      </div>
      <div class="status-row">
        <span class="status-label">Last Run:</span>
        <span id="last-run-text">No last run available</span>
      </div>
    </div>
  </form>

  <!-- Mover Log Panel -->
  <div id="moved-log-container">
    <div class="log-header">
      <h3>Mover Log For Last Run</h3>
      <div id="log-duration" style="margin-bottom: 10px; color: var(--primary-blue); font-size: 14px;"></div>
      <div id="log-counts" class="log-stats"></div>
    </div>
    <input type="text" id="log-filter" class="short-input-filter" placeholder="🔍 Filter keyword" style="margin-bottom: 12px;">
    <pre id="automover-log">Loading...</pre>
    <div id="log-counts"></div>
  </div>

  <!-- Last Run Panel -->
  <div id="last-run-container">
    <h3>Last Run Details</h3>
    <pre id="last-run-log">Loading last run log...</pre>
  </div>
</div>

<script>
const startBadge = document.getElementById('start-confirmation');
const stopBadge = document.getElementById('stop-confirmation');

function updateStatus() {
  fetch('/plugins/automover/helpers/status_check.php')
    .then(res => res.json())
    .then(data => {
      document.getElementById('status-text').textContent = data.status;
      document.getElementById('last-run-text').textContent = data.last_run;
    })
    .catch(err => {
      console.error('Failed to fetch Automover status:', err);
      document.getElementById('status-text').textContent = 'No details available';
    });
}
// Initial load + refresh loop
updateStatus();
setInterval(updateStatus, 5000);

document.addEventListener('DOMContentLoaded', function () {
  const form = document.getElementById('automover-settings');
  const poolSelect = document.getElementById('pool');
  const intervalInput = document.getElementById('interval');
  const thresholdInput = document.getElementById('threshold');
  const saveBtn = document.getElementById('save-settings');
  const confirmBadge = document.getElementById('save-confirmation');
  let currentPoolSelection = poolSelect.dataset.selected || '';

  // --- Pool Usage ---
  function updatePoolUsage() {
    fetch('/plugins/automover/helpers/pool_usage.php')
      .then(res => res.json())
      .then(data => {
        poolSelect.innerHTML = '';
        const pools = Object.keys(data).filter(name => data[name] !== 'N/A');
        if (pools.length === 0) {
          poolSelect.innerHTML = '<option disabled>No pools detected</option>';
        } else {
          pools.forEach(pool => {
            const option = document.createElement('option');
            option.value = pool;
            option.textContent = `${pool} (${data[pool]}%)`;
            if (pool === currentPoolSelection) option.selected = true;
            poolSelect.appendChild(option);
          });
        }
      })
      .catch(err => {
        console.error('Pool usage fetch failed:', err);
        poolSelect.innerHTML = '<option disabled>Error fetching pool usage</option>';
      });

    poolSelect.addEventListener('change', () => {
      currentPoolSelection = poolSelect.value;
    });
  }
  updatePoolUsage();
  setInterval(updatePoolUsage, 5000);

  // --- Log filtering ---
  const filterInput = document.getElementById('log-filter');
  let filterTimer;
  filterInput.addEventListener('input', () => {
    clearTimeout(filterTimer);
    filterTimer = setTimeout(loadMoverLog, 500);
  });

  function loadLastRunLog() {
    fetch('/plugins/automover/helpers/fetch_last_run_log.php')
      .then(res => res.text())
      .then(data => {
        document.getElementById('last-run-log').textContent = data || 'No last run data available.';
      })
      .catch(err => {
        console.error('Failed to fetch last run log:', err);
        document.getElementById('last-run-log').textContent = 'Error loading last run log.';
      });
  }
  loadLastRunLog();
  setInterval(loadLastRunLog, 5000);

  function formatDuration(secondsStr) {
    const seconds = parseInt(secondsStr.replace(/[^\d]/g, ''), 10);
    if (isNaN(seconds)) return null;
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return mins > 0 ? `${mins}m ${secs}s` : `${secs}s`;
  }

  function loadMoverLog() {
    const keyword = filterInput.value.trim();
    const query = keyword ? `?filter=${encodeURIComponent(keyword)}` : '';
    fetch(`/plugins/automover/helpers/fetch_files_moved_log.php${query}`)
      .then(res => res.json())
      .then(data => {
        const formattedDuration = data.duration ? formatDuration(data.duration) : null;
        document.getElementById('log-duration').innerHTML = formattedDuration
          ? `⏱ Duration: <strong>${formattedDuration}</strong>`
          : '⏱ Duration: Nothing to track yet';

        const logContainer = document.getElementById('automover-log');
        logContainer.innerHTML = '';
        data.log.split('\n').forEach(line => {
          const div = document.createElement('div');
          div.textContent = line;
          if (line.toLowerCase().includes('skipped')) div.classList.add('skipped-line');
          logContainer.appendChild(div);
        });

        document.getElementById('log-counts').innerHTML = `
          📦 Files Moved: <strong>${data.moved}</strong>
        `;
      })
      .catch(err => {
        console.error('Failed to fetch mover log:', err);
        document.getElementById('automover-log').textContent = 'Error loading log.';
        document.getElementById('log-counts').textContent = '';
        document.getElementById('log-duration').textContent = '';
      });
  }
  loadMoverLog();
  setInterval(loadMoverLog, 5000);

  // --- Stop button ---
document.getElementById('stop-button').addEventListener('click', function () {
  const messageBox = document.getElementById('save-messages');
  messageBox.innerHTML = ''; // Clear previous messages
  messageBox.style.display = 'none'; // Optionally hide it

  fetch('/plugins/automover/helpers/stop_cron.php')
    .then(res => res.json())
    .then(data => {
      console.log('Stop response:', data);
      updateStatus();
      updatePoolUsage();

      stopBadge.style.display = 'inline-block';
      stopBadge.style.opacity = '0';
      stopBadge.style.animation = 'none';
      void stopBadge.offsetWidth;
      stopBadge.style.animation = 'flash 0.4s ease';
      stopBadge.style.opacity = '1';
      setTimeout(() => {
        stopBadge.style.opacity = '0';
        stopBadge.style.display = 'none';
      }, 3000);
    })
    .catch(err => {
      console.error('Failed to stop Automover:', err);
      document.getElementById('status-text').textContent = 'Error stopping cron';
    });
});

  // --- Validation ---
  function validateField(input, rules, warningId) {
    const value = input.value.trim();
    const number = parseFloat(value);
    const invalid = isNaN(number) || (rules.min !== undefined && number < rules.min) || (rules.max !== undefined && number > rules.max);
    input.classList.toggle('invalid', invalid);
    document.getElementById(warningId).style.display = invalid ? 'block' : 'none';
    return !invalid;
  }

  intervalInput.addEventListener('input', () => validateField(intervalInput, { min: 1 }, 'interval-warning'));
  thresholdInput.addEventListener('input', () => validateField(thresholdInput, { min: 0, max: 100 }, 'threshold-warning'));

  // --- Save & Start ---
saveBtn.addEventListener('click', function () {
  const intervalValid = validateField(intervalInput, { min: 1 }, 'interval-warning');
  const thresholdValid = validateField(thresholdInput, { min: 0, max: 100 }, 'threshold-warning');
  if (!intervalValid || !thresholdValid) {
    form.classList.add('shake');
    setTimeout(() => form.classList.remove('shake'), 300);
    return;
  }

  const settings = {
    POOL_NAME: poolSelect.value,
    THRESHOLD: thresholdInput.value,
    INTERVAL: intervalInput.value,
    DRY_RUN: document.getElementById('dry_run').checked ? 'yes' : 'no',
    ALLOW_DURING_PARITY_CHECK: document.getElementById('allow_during_parity').checked ? 'yes' : 'no',
    AUTOSTART: document.getElementById('autostart').checked ? 'yes' : 'no',
    DISABLE_UNRAID_MOVER_SCHEDULE: document.getElementById('disable_unraid_mover_schedule').checked ? 'yes' : 'no'
  };
  const query = new URLSearchParams(settings).toString();

  const confirmBadge = document.getElementById('save-confirmation');
  const messageBox = document.getElementById('save-messages');
  messageBox.innerHTML = '';
  messageBox.style.display = 'block';

  fetch('/plugins/automover/helpers/save_settings.php?' + query)
    .then(res => res.text())
    .then(text => {
      try {
        const data = JSON.parse(text);

        if (data.status === 'ok') {
          // Show confirmation badge
          confirmBadge.style.display = 'inline-block';
          confirmBadge.style.opacity = '0';
          confirmBadge.style.animation = 'none';
          void confirmBadge.offsetWidth;
          confirmBadge.style.animation = 'flash 0.4s ease';
          confirmBadge.style.opacity = '1';
          setTimeout(() => {
            confirmBadge.style.opacity = '0';
            confirmBadge.style.display = 'none';
          }, 3000);

          // Show save_settings.php messages
          if (Array.isArray(data.messages) && data.messages.length > 0) {
            data.messages.forEach(msg => {
              const line = document.createElement('div');
              line.textContent = msg;
              messageBox.appendChild(line);
            });
          }

          // Start Automover and show its messages too
          fetch(`/plugins/automover/helpers/start_cron.php?${new URLSearchParams(settings)}`)
            .then(res => res.json())
            .then(startData => {
              console.log('Start response:', startData);
              updateStatus();

              if (Array.isArray(startData.messages) && startData.messages.length > 0) {
                startData.messages.forEach(msg => {
                  const line = document.createElement('div');
                  line.textContent = msg;
                  messageBox.appendChild(line);
                });
              }
            })
            .catch(err => {
              console.error('Failed to start Automover:', err);
              document.getElementById('status-text').textContent = 'Error starting cron';
              messageBox.innerHTML += `<div style="color: red;">❌ Error starting Automover</div>`;
            });
        } else {
          console.error('Save failed:', data.message);
          messageBox.innerHTML = `<div style="color: red;">❌ ${data.message || 'Save failed'}</div>`;
        }
      } catch (err) {
        console.error('Response parse failed:', err, 'Raw:', text);
        messageBox.innerHTML = `<div style="color: red;">❌ Invalid response from server</div>`;
      }
    })
    .catch(err => {
      console.error('Save failed:', err);
      messageBox.innerHTML = `<div style="color: red;">❌ Save request failed</div>`;
    });
});

});
</script>
<script>
document.addEventListener("DOMContentLoaded", () => {
  const poolSelect = document.getElementById('pool');
  const poolWarning = document.getElementById('pool-warning');

  function checkPoolUsage(poolName) {
    if (!poolName) {
      poolWarning.style.display = 'none';
      return;
    }
    fetch(`/plugins/automover/helpers/check_pool_usage.php?pool=${encodeURIComponent(poolName)}`)
      .then(res => res.json())
      .then(data => {
        if (!data.in_use) poolWarning.style.display = 'block';
        else poolWarning.style.display = 'none';
      })
      .catch(err => {
        console.error("Failed to check pool usage:", err);
        poolWarning.style.display = 'none';
      });
  }

  poolSelect.addEventListener('change', () => checkPoolUsage(poolSelect.value));
  setTimeout(() => { checkPoolUsage(poolSelect.value); }, 250);
});
if ( typeof caPluginUpdateCheck === "function" ) {
        caPluginUpdateCheck("automover.plg",{name:"Automover"});
    }
</script>
