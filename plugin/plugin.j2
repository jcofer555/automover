<?xml version='1.0' standalone='yes'?>
<!DOCTYPE PLUGIN>

<PLUGIN 
  name="{{ name }}"
  author="{{ author }}"
  version="{{ env['PLUGIN_VERSION'] }}"
  {% if launch is defined %}launch="{{ launch }}"{% endif %}
  pluginURL="https://raw.githubusercontent.com/{{ env['GITHUB_REPOSITORY'] }}/main/plugin/{{ name }}.plg"
  {% if support is defined %}support="{{ support }}"{% endif %}
  {% if min is defined %}min="{{ min }}"{% endif %}
  {% if max is defined %}max="{{ max }}"{% endif %}
  {% if icon is defined %}icon="{{ icon }}"{% endif %}
>

<CHANGES>
<![CDATA[
{{ env['PLUGIN_CHANGELOG'] }}

For older releases, see https://github.com/{{ env['GITHUB_REPOSITORY'] }}/releases
]]>
</CHANGES>

<FILE Name="/boot/config/plugins/{{ name }}/{{ package_name }}-{{ env['PLUGIN_VERSION'] }}-noarch-1.txz">
<URL>https://github.com/{{ env['GITHUB_REPOSITORY'] }}/releases/download/{{ env['PLUGIN_VERSION'] }}/{{ package_name }}-{{ env['PLUGIN_VERSION'] }}-noarch-1.txz</URL>
<SHA256>{{ env['PLUGIN_CHECKSUM'] }}</SHA256>
</FILE>

<!--
The 'install' script.
-->
<FILE Run="/bin/bash">
<INLINE>
<![CDATA[
upgradepkg --install-new /boot/config/plugins/{{ name }}/{{ package_name }}-{{ env['PLUGIN_VERSION'] }}-noarch-1.txz

USER_CFG="/boot/config/plugins/automover/settings.cfg"
DEFAULT_CFG="/usr/local/emhttp/plugins/automover/helpers/default_settings.cfg"
TMP_CFG="/tmp/automover_settings.tmp"

# Define the desired key order
ordered_keys=(
    "POOL_NAME"
    "THRESHOLD"
    "INTERVAL"
    "DRY_RUN"
    "ALLOW_DURING_PARITY_CHECK"
    "AUTOSTART"
    "DISABLE_UNRAID_MOVER_SCHEDULE"
    "AGE_BASED_FILTER"
    "AGE_DAYS"
    "SIZE_BASED_FILTER"
    "SIZE_MB"
    "EXCLUSIONS_ENABLED"
)

# If user config doesn't exist, copy the default
if [ ! -f "$USER_CFG" ]; then
    cp "$DEFAULT_CFG" "$USER_CFG"
else
    # Add missing keys from default config
    while IFS='=' read -r key val; do
        [[ -z "$key" || "$key" =~ ^[[:space:]]*# ]] && continue
        if ! grep -q -E "^[[:space:]]*${key}[[:space:]]*=" "$USER_CFG"; then
            echo "$key=$val" >> "$USER_CFG"
        fi
    done < "$DEFAULT_CFG"
fi

# Sort config: priority keys first, then the rest
{
    # Print ordered keys in order if they exist
    for key in "${ordered_keys[@]}"; do
        grep -E "^[[:space:]]*${key}[[:space:]]*=" "$USER_CFG"
    done

    # Print remaining keys not in the ordered list
    grep -v -E "^($(IFS='|'; echo "${ordered_keys[*]}"))=" "$USER_CFG"
} > "$TMP_CFG"

# Replace original config with sorted version
mv "$TMP_CFG" "$USER_CFG"

SETTINGS="/boot/config/plugins/automover/settings.cfg"
CRON_FILE="/boot/config/plugins/automover/automover.cron"

if [ -e "$SETTINGS" ]; then
    source "$SETTINGS"
fi

if [ "$AUTOSTART" == "no" ]; then

  # Clean up old versions
  rm -f $(ls /boot/config/plugins/{{ name }}/{{ package_name }}-*.txz 2>/dev/null | grep -v '{{ env['PLUGIN_VERSION'] }}')

  # Removing cron
  rm -f "$CRON_FILE"

  echo ""
  echo "----------------------------------------------------"
  echo " {{ name }} has been installed."
  echo " Version: {{ env['PLUGIN_VERSION'] }}"
  echo "----------------------------------------------------"
  echo ""
  
else

# Extract interval
INTERVAL=$(grep INTERVAL "$SETTINGS" | cut -d '"' -f2)

# Write cron schedule
echo "*/$INTERVAL * * * * /usr/local/emhttp/plugins/automover/helpers/automover.sh &> /dev/null 2>&1" > "$CRON_FILE"

# Reload Unraid cron
update_cron

# cleanup old versions
rm -f $(ls /boot/config/plugins/{{ name }}/{{ package_name }}-*.txz 2>/dev/null | grep -v '{{ env['PLUGIN_VERSION'] }}')

echo ""
echo "----------------------------------------------------"
echo " {{ name }} has been installed."
echo " Version: {{ env['PLUGIN_VERSION'] }}"
echo "----------------------------------------------------"
echo ""
fi
]]>
</INLINE>
</FILE>

<!--
The 'remove' script.
-->
<FILE Run="/bin/bash" Method="remove">
<INLINE>
<![CDATA[
removepkg {{ package_name }}

if [[ -f /usr/local/sbin/mover.automover ]]; then
  size=$(stat -c%s /usr/local/sbin/mover.automover)
  if (( size >= 4096 )); then
    rm -f /usr/local/sbin/mover
    cp /usr/local/sbin/mover.automover /usr/local/sbin/mover
  else
    rm -f /usr/local/sbin/mover.automover
    echo "⚠️ The mover.automover file is not the right size so schedule was not restored. Please reboot Unraid to fully re-enable Unraid's mover schedule."
  fi
fi
rm -rf /usr/local/emhttp/plugins/{{ name }}
rm -rf /boot/config/plugins/{{ name }}
]]>
</INLINE>
</FILE>

</PLUGIN>
